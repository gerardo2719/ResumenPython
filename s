{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17l0bRkUQjzo2iOjIyFANADV2mBevLUiF","timestamp":1665685818149}],"collapsed_sections":[],"authorship_tag":"ABX9TyOoSb8HESq44/pGyy6dzK8V"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Tipo de datos**\n","##### Un tipo de dato define el tipo y el rango de un valor.\n","##### Una variable es la forma de llamar a un valor.\n","Existen distintos tipos:\n","\n","\n","*   Números\n","    * Integrales : todos los numeros positivos y negativos.\n","    * Flotante : todos los numeros positivos y negativos con decimales.\n","    * Números complejos : `complex(real, imaginary)`\n","*   Cadena de texto : cadena de caracteres\n","*   Booleano : True / False\n","\n","---\n","\n","#**None Keyword**\n","##### Es un tipo de dato llamado `NoneType` y solo tiene un valor `None`, la podemos asignar a cualquier variable.\n"],"metadata":{"id":"6XgoFpv05mXS"}},{"cell_type":"code","source":["val = None\n","print(val)\n","print (type(val))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RAxNbwsi7_Aj","executionInfo":{"status":"ok","timestamp":1665685745548,"user_tz":-120,"elapsed":270,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"678a50e4-0d61-4e92-e385-9d6daed502d6"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["None\n","<class 'NoneType'>\n"]}]},{"cell_type":"markdown","source":["#**Slicing**\n","##### El Slicing es el proceso de obtener una parte de una cadena usando sus índices.\n","`string[start:end]`\n","##### El \"ultimo caracter\" no se incluye.\n","##### Ejemplo:"],"metadata":{"id":"-2YpBg51BHmP"}},{"cell_type":"code","source":["string = \"Hola Mundo\"\n","print(string[1:3]) # Desde la posición 1, hasta la 3 (sin olvidar que la ultima no se incluye)\n","\n","print(string[5:len(string)]) # Desde la 5ª posición hasta el final de la cadena\n","\n","print(string[0:4:2]) # Desde la posición 0 hasta la 4ª, dando saltos de 2\n","\n","print(string[::-1]) # Toda la cadena, en pasos de 1 empezando por el final"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mprVIAV8CoCZ","executionInfo":{"status":"ok","timestamp":1665685747546,"user_tz":-120,"elapsed":2,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"906dfeb8-cf3c-4c90-b674-0d67cf0c21e5"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["ol\n","Mundo\n","Hl\n","odnuM aloH\n"]}]},{"cell_type":"markdown","source":["---\n","\n","#**Operadores**\n","##### Los operadores son usados para realizar operaciones aritméticas y lógicas en los datos.\n","##### Los principales tipos de operadores son:\n","### **Aritméticos**\n","\n","\n"],"metadata":{"id":"ODNdoz6rGWvd"}},{"cell_type":"code","source":["print(10 + 5) # Suma\n","print(10 - 5) # Resta\n","print(10 * 5) # Multiplicación\n","print(10 / 5) # División\n","print(10 // 3) # División redondeada al integer más bajo\n","print(10 % 5) # Módulo es el resto de una división"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ir1R83oFHdzY","executionInfo":{"status":"ok","timestamp":1665685750837,"user_tz":-120,"elapsed":588,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"a97b47be-045d-4637-fdc8-28a54003bdba"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n","5\n","50\n","2.0\n","3\n","0\n"]}]},{"cell_type":"markdown","source":["### **Comparación**\n"],"metadata":{"id":"DNmGW2bzJN-v"}},{"cell_type":"code","source":["n_uno = 1\n","n_dos = 2\n","lista_uno = [1,2,3]\n","lista_dos = [3,2,1]\n","print(n_uno > n_dos) # Si el n_uno es mayor que el n_dos\n","print(n_uno < n_dos) # Si el n_uno es menor que el n_dos\n","print(n_uno >= n_uno) # Si el n_uno es mayor o igual que el n_uno\n","print(n_uno <= n_uno) # Si el n_uno es menor o igual que el n_uno\n","print(n_uno == n_uno) # Si el n_uno es igual que el n_uno\n","print(n_uno != n_uno) # Si el n_uno no es igual que el n_uno\n","print(lista_uno is lista_dos) # Si el n_uno es n_dos\n","print(lista_uno is not lista_dos) # Si el n_uno no es n_dos\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PoBTw5qXJbzz","executionInfo":{"status":"ok","timestamp":1665685753135,"user_tz":-120,"elapsed":402,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"b8fcd006-1239-4159-b98d-b87abec87757"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","True\n","True\n","True\n","True\n","False\n","False\n","True\n"]}]},{"cell_type":"markdown","source":["### **Asignación**"],"metadata":{"id":"KUh5LicOLaKX"}},{"cell_type":"code","source":[],"metadata":{"id":"jC4CaqNMNOzu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **Lógicos**\n","##### `True = 1` \n","##### `False = 0`"],"metadata":{"id":"5k8Ktli6NVLZ"}},{"cell_type":"code","source":["n1 = 1\n","n2 = 2\n","n3 = 3\n","print(n1 == n1 and n2 == n2) # Y\n","print(n1 == n1 or n2 == n3) # O\n","print(not n1 == n2) # NO"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bA9ysTwzNqPm","executionInfo":{"status":"ok","timestamp":1665685756748,"user_tz":-120,"elapsed":458,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"270bca57-ab76-499c-eaa7-198696bab32b"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n","True\n"]}]},{"cell_type":"markdown","source":["###**Bitwise**"],"metadata":{"id":"OXqtq-oFWA38"}},{"cell_type":"code","source":["num1 = 20 # 10100\n","num2 = 30 # 11110\n","          \n","print(num1 & num2) # Devuelve 1 si ambos bits son 1, sino 0 (AND)\n","print(num1 | num2) # Devuelve 1 si alguno de los bits son 1, sino 0 (OR)\n","print(~num2) # Devuelve el complemento del numero (NOT)\n","print(num1 ^ num2) # Devuelve 1 si de uno de los bits es 1 y del otro es 0, sino 0 (XOR)\n","print(num1 << 2) # Mueve los bits a la izquierda\n","print(num1 >> 2) # Mueve los bits a la derecha\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sBLTJhroWGKF","executionInfo":{"status":"ok","timestamp":1665685758681,"user_tz":-120,"elapsed":256,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"a65a8a76-6b81-45c9-8f96-22a80bc204b2"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["20\n","30\n","-31\n","10\n","80\n","5\n"]}]},{"cell_type":"markdown","source":["### **Strings**\n","##### Compara por su valor en *Unicode* : `> | < | == | <= | >=`"],"metadata":{"id":"OEcqdHc6bJkX"}},{"cell_type":"code","source":["print('a' < 'b')  # 'a' has a smaller Unicode value\n","\n","house = \"Gryffindor\"\n","house_copy = \"Gryffindor\"\n","\n","print(house == house_copy)\n","\n","new_house = \"Slytherin\"\n","\n","print(house == new_house)\n","\n","print(new_house <= house)\n","\n","print(new_house >= house)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KDWOgBWMbM7v","executionInfo":{"status":"ok","timestamp":1665685760616,"user_tz":-120,"elapsed":236,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"bb998812-cfca-44e0-923a-17ea46d75e12"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n","False\n","False\n","True\n"]}]},{"cell_type":"markdown","source":["##### Concatenación"],"metadata":{"id":"FmgKNkCBcCPn"}},{"cell_type":"code","source":["primer = \"Ho\"\n","segundo = \"la\"\n","completo = primer + segundo # El signo + concatena cadenas de caracteres\n","\n","print(completo)\n","print(completo * 3) # El signo * repite la cadena x veces"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t5Z5E7_jcK8R","executionInfo":{"status":"ok","timestamp":1665685762726,"user_tz":-120,"elapsed":320,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"9527edd1-e4e9-460d-e751-deacc4cc12d6"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Hola\n","HolaHolaHola\n"]}]},{"cell_type":"markdown","source":["##### Buscar\n"],"metadata":{"id":"irigNEbKcusT"}},{"cell_type":"code","source":["cadena = \"Hola me llamo Gerardo\"\n","# Busca si una dada cadena de caracteres se encuentra en una cadena\n","# si está en la cadena devuelve True y si no esta devuelve False\n","print('Gerardo' in cadena)\n","print('ala' in cadena)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lXF29RgGcwrM","executionInfo":{"status":"ok","timestamp":1665685764497,"user_tz":-120,"elapsed":3,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"787b088a-110c-4e54-c058-9827a36c38e9"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"markdown","source":["---\n","\n","#**Agrupación de valores**"],"metadata":{"id":"2BJR3DrQeic8"}},{"cell_type":"code","source":["lista = [1,\"Manzana\",True]\n","\n","print(lista[2]) # Imprime en pantalla la segunda posición de la lista\n","print(len(lista)) # Imprime la cantidad de valores que tiene la lista"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bZs2sZeer-8","executionInfo":{"status":"ok","timestamp":1665685766765,"user_tz":-120,"elapsed":212,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"8313cf49-7726-41cd-dc7e-9f98cb747a63"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","3\n"]}]},{"cell_type":"markdown","source":["---\n","\n","# **Conditional Statement**\n","##### Un conditional statement es una expresión booleana que si es True, ejecuta una pieza de código. Ejemplo:"],"metadata":{"id":"XJUkv2HSiX4A"}},{"cell_type":"code","source":["num1 = 10\n","num2 = 20\n","\n","if num2 > num1 and num1 > 0:\n","  if not num2 == num1:\n","    print(\"num2 es mayor que el num1 y num1 es mayor que 0 y num1 y num2 no son iguales\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9DBlTPWqi8LB","executionInfo":{"status":"ok","timestamp":1665685769429,"user_tz":-120,"elapsed":216,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"ed6e87fc-6f21-43c4-d3ee-3ff06b4f179f"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["num2 es mayor que el num1 y num1 es mayor que 0 y num1 y num2 no son iguales\n"]}]},{"cell_type":"markdown","source":["### Creación y edición de valores con If-Else"],"metadata":{"id":"neLtM2pukBul"}},{"cell_type":"code","source":["num = 11\n","val = None\n","if num >= 0 and num <=10:\n","  val = \"Si esta entre 0 y 10\"\n","else:\n","  val = \"No esta entre 0 y 10\"\n","\n","print(val)\n","\n","# También se puede expresar de la siguiente manera:\n","\n","output = \"si esta entre 0 y 10\" if num >= 0 and num <=10 else \"no esta entre 0 y 10\"\n","print (output)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dR8Bj9A8kMJG","executionInfo":{"status":"ok","timestamp":1665685771322,"user_tz":-120,"elapsed":2,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"3877262a-4ea8-43d3-b5a0-7f079d19fae7"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["No esta entre 0 y 10\n","no esta entre 0 y 10\n"]}]},{"cell_type":"markdown","source":["### If-Elif-Else"],"metadata":{"id":"UJ3yOKXrl6rn"}},{"cell_type":"code","source":["num = 1\n","\n","if num == 0:\n","    print(\"Cero\")\n","elif num == 1:\n","    print(\"Uno\")\n","elif num == 2:\n","    print(\"Dos\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YVozv00jmAJx","executionInfo":{"status":"ok","timestamp":1665685774557,"user_tz":-120,"elapsed":607,"user":{"displayName":"Gerardo Ruiz","userId":"05503096027938680743"}},"outputId":"6a47dcf2-8c59-4d9b-86ba-0c52aae600af"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Uno\n"]}]}]}
